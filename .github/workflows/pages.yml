name: Build & Deploy SEC 1.05 Feed

on:
  workflow_dispatch:
  schedule:
    - cron: "15 * * * *"   # hourly at :15 (UTC)
  push:
    paths:
      - edgar_105_to_json.py
      - requirements.txt
      - public/**
      - .github/workflows/pages.yml

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    # Expose secrets as env so we can reference env.* in if:
    env:
      PUSHOVER_APP_TOKEN: ${{ secrets.PUSHOVER_APP_TOKEN }}
      PUSHOVER_USER_KEY:  ${{ secrets.PUSHOVER_USER_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate feed
        run: python edgar_105_to_json.py --out public/sec-105.json --days 180
        env:
          SEC_CONTACT_EMAIL: ${{ secrets.SEC_CONTACT_EMAIL }}

      # ---- Diff against last published feed ----
      - name: Fetch previously published feed
        run: |
          curl -fsSL https://edencyber.github.io/sec-105-feed/sec-105.json -o old.json \
          || (echo '{"results":[]}' > old.json)

      - id: diff
        name: Find new entries
        run: |
          python - <<'PY'
          import os, json
          new = json.load(open('public/sec-105.json'))
          try:
            old = json.load(open('old.json'))
          except Exception:
            old = {"results": []}
          def rec_id(x):
            return x.get('document_href') or x.get('filing_href') or f"{x.get('cik')}-{x.get('filing_date')}"
          old_ids = {rec_id(x) for x in old.get('results', []) if rec_id(x)}
          fresh = [x for x in new.get('results', []) if rec_id(x) not in old_ids]
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            fh.write(f"has_new={'true' if fresh else 'false'}\n")
            if fresh:
              first = fresh[0]
              fh.write(f"title=New SEC 1.05 filing: {first.get('company_name','')}\n")
              fh.write(f"msg={first.get('company_name','')} ({first.get('ticker','')}) on {first.get('filing_date','')}\n")
              fh.write(f"url={first.get('filing_href','https://edencyber.com/')}\n")
          PY

      # ---- Mobile push via Pushover ----
      - name: Pushover notify
        if: ${{ steps.diff.outputs.has_new == 'true' && env.PUSHOVER_APP_TOKEN != '' && env.PUSHOVER_USER_KEY != '' }}
        env:
          APP:  ${{ env.PUSHOVER_APP_TOKEN }}
          USER: ${{ env.PUSHOVER_USER_KEY }}
          TITLE: ${{ steps.diff.outputs.title }}
          MSG:   ${{ steps.diff.outputs.msg }}
          URL:   ${{ steps.diff.outputs.url }}
        run: |
          curl -sS -X POST https://api.pushover.net/1/messages.json \
            -d token="$APP" \
            -d user="$USER" \
            -d title="$TITLE" \
            -d message="$MSG" \
            -d url="$URL"

      # ---- Publish to GitHub Pages ----
      - uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

